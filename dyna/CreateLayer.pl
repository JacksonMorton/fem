#!/usr/bin/perl -w
###################################################################
# 
# CreateLayer.pl
# INPUTS:
# NodeFile (string) - file containing the *NODE information
#	              (generated by ParseElemsNodes)
# ElemFile (string) - file containing the *ELEMENT_SOLID
#                     information (generated by ParseElemsNodes)
# column (int) - 1-3, depending on what dimension to search for specified
#                min/max values (typically: x=1, y=2, z=3; 0 is the node ID)
# Lmin (float) - min coordinate of layer (mesh units)
# Lmax (float) - max coordinate of end of layer (mesh units)
#
# OUTPUT:
# layer_dim_Lmin_Lmax.dyn - ASCII file with the new *ELEMENT_SOLID data
# sphere elements are assigned part #2, while background is
# part #1
#
# EXAMPLE: ./CreateLayer.pl nodes.dyn elems.dyn 2 1.0 2.0
#
# Mark 05/13/05
#
###################################################################
# modified to apply the layer in any spatial orientation with
# min/max values specified in those dimensions
#
# StartZ/StopZ removed; now Lmin and Lmax
#
# column # input added to specify search dimension
#
# Renamed the output file w/ more info; can clobber if it exists.
# Commandline stored as comment in the output file.
# 
# Assuming data are comma-delimited (nodes & elements).
# 
# Mark Palmeri (mlp6)
# 2010-04-20
###################################################################

# check that the correct number of input arguments are
# provided and that they make sense
if(($#ARGV+1) != 5) { die "Wrong number of input arguments (!=5)" }

$NodeFile = "$ARGV[0]";
$ElemFile = "$ARGV[1]";
$column = "$ARGV[2]";
$Lmin = "$ARGV[3]";
$Lmax = "$ARGV[4]";

if($Lmin > $Lmax) {
    die "Lmin [$Lmin] > Lmax [$Lmax]; problem?"
}
if($column != 1 && $column != 2 && $column != 3) {
    die "column [$column] should be 1, 2, or 3"
}

# open up the files with the nodal and element information
open(NODEFILE,"<$NodeFile") || die "The node input file couldn't be opened!";
open(ELEMFILE,"<$ElemFile") || die "The element input file couldn't be opened!";

$LesionFileName = "layer_$column\_$Lmin\_$Lmax.dyn";
open(LESIONFILE,"> $LesionFileName");

# print some header information
print LESIONFILE "*ELEMENT_SOLID\n";
print LESIONFILE "\$ $0 ";
map { print LESIONFILE "$_ " } @ARGV;
print LESIONFILE "\n";

# read in the nodes and see which ones fall within the sphere
# that has been specfied by the user
print "Processing $NodeFile . . .  ";

# initialize the index of lesion nodes found to 0
$NodeCount = 0;

while(<NODEFILE>) {
	# remove the EOL character
  chomp;

  @fields = split(',',$_);

  # the actual node IDs and coordinates occupy 4 columns (the
  # header and footer are only a single column)
  if( ($#fields + 1) == 4) {
      
		$NodeCount = ++$NodeCount;

		if(($fields[$column] > $Lmin) && ($fields[$column] > $Lmax)) {
			$hash{$fields[0]}++;
			#$LN[$fields[0]] = 1;
		}
	}
}

#open(KEYS,'>keys.out');
@keys = keys %hash;
$size = @keys;
#while ($#keys >= 0) { print KEYS pop(@keys),"\n"; }
#close(KEYS);

print $size." layer nodes found out of ".$NodeCount." total nodes\n"; 

close(NODEFILE);

print "Procesing $ElemFile . . .  ";
$elcount = 0;
while(<ELEMFILE>) {
  # remove the EOL character
  chomp;

    @fields = split(',',$_);

  # the element ID and part ID are the first two columns; the
  # following 8 are the nodes associated with that element
  if( ($#fields + 1) == 10) {

    # a "fix" for erroneous spaces after the last element node ID
    #print "\nWARNING - chopping off space from last node entry for each element!!
    #If this space doesn't exist, then the node ID will be corrupted,
    #but without any error!!\n\n";
    #chop $fields[9];

		# check to see if any of the nodes for this element match
		# the nodes that are in the lesion 
		# if so, change the part ID -> 2
		if(exists $hash{$fields[2]} || 
			 exists $hash{$fields[3]} || 
		   exists $hash{$fields[4]} || 
			 exists $hash{$fields[5]} || 
			 exists $hash{$fields[6]} || 
			 exists $hash{$fields[7]} || 
			 exists $hash{$fields[8]} || 
			 exists $hash{$fields[9]}) {
				$fields[1] = 2;
				print LESIONFILE join(",",@fields)."\n";
				$elcount = ++$elcount;
		}
		else {
			$fields[1] = 1;
			print LESIONFILE join(",",@fields)."\n";
		}
  }
}

close(ELEMFILE);

print "$elcount elements converted from part ID 1 -> 2\n";

# print the footer and close lesion.dyn
print LESIONFILE "*END\n";
print LESIONFILE "\$ $size layer nodes found out of $NodeCount total nodes\n"; 
print LESIONFILE "\$ $elcount elements converted from part ID 1 -> 2\n";
close(LESIONFILE);

print "Done writing layered element data to $LesionFileName\n";
