function [X,Y,Z,DX,DY,DZ,NODES]=read_marks_table(filename);
%
% [X,Y,Z,DX,DY,DZ,NODES]=read_marks_table(filename);
%
% Reads in node tables generated by Mark P.'s code.
% Returns X,Y,Z matrices of initial positions.
% Returns DX,DY,DZ displacements of nodes.
% NODES are the node numbers in the same format as X,Y,Z
%
% Assumes rectilinear mesh.  Should be plaid.
% Trys to figure grid on its own.
%
%
% Initial version 4/25/02 Stephen McAleavey
% Mod 4/26 to add NODES to output S.McA
% Modified from read_hmesh_table on 9/12/02 S.McA

load(filename);
vnames=whos('disp*');

noc_loc=zeros(length(nodes),4);
node_disp=zeros(length(nodes),4);

noc_loc(:,2)=node_coord(:,1);
noc_loc(:,3)=node_coord(:,2);
noc_loc(:,4)=node_coord(:,3);


for n=1:length(vnames),
dummy=eval(vnames(n).name);
noc_disp(:,2+(n-1)*3)=dummy(:,1);
noc_disp(:,3+(n-1)*3)=dummy(:,2);
noc_disp(:,4+(n-1)*3)=dummy(:,3);
end;
%node_loc is Mx4, node_disp is Mx4, node_id, (D)X, (D)Y, (D)Z

[Y,I]=sort(noc_loc(:,2));
noc_loc=noc_loc(I,:);
noc_disp=noc_disp(I,:);
[Y,I]=sort(noc_loc(:,3));
noc_loc=noc_loc(I,:);
noc_disp=noc_disp(I,:);  
[Y,I]=sort(noc_loc(:,4));
noc_loc=noc_loc(I,:); 
noc_disp=noc_disp(I,:);  
%
% Formates data to matlab's liking: 3-D arrays
%
% First, must figure out grid structure.
% How many distinct x, y, z values are there?
[rnoc,cnoc]=size(noc_loc);
% ix iy and iz keep one copy of each distinct grid value
% Inf shouldn't match any coordinate and is used so you
% don't get empty-scaler comparison warnings

ix=[Inf]; 
iy=[Inf];
iz=[Inf];

% look to see if you've found this x, y or z value yet, and 
% if not, add it to the appropriate table
for x=1:rnoc,	
	if(~sum(ix==noc_loc(x,2))), ix=[ix noc_loc(x,2)];end;
	if(~sum(iy==noc_loc(x,3))), iy=[iy noc_loc(x,3)];end;	
	if(~sum(iz==noc_loc(x,4))), iz=[iz noc_loc(x,4)];end;
	end;
% subtract one 'cause Inf is an extra entry in each table
% this gives us the x,y and x dimensions of the mesh, in nodes
nx=max(size(ix))-1;ny=max(size(iy))-1;nz=max(size(iz))-1;
% 
% make sure that the estimated x,y and z node dimensions (not physical dimensions,
% but number of node dimensions) matches reality 
if((nx*ny*nz)~=rnoc), 
	disp('Crap, I can''t figure out the mesh arrangement!!  Bailing out....');
	return;
	end;

NODES=noc_loc(:,1);
X=noc_loc(:,2);
Y=noc_loc(:,3);
Z=noc_loc(:,4);
NODES=reshape(NODES,ny,nx,nz);
X=reshape(X,ny,nx,nz);
Y=reshape(Y,ny,nx,nz);
Z=reshape(Z,ny,nx,nz);
for n=1:length(vnames),
	TDX=noc_disp(:,2+(n-1)*3);
	TDY=noc_disp(:,3+(n-1)*3);
	TDZ=noc_disp(:,4+(n-1)*3);
	DX(:,:,:,n)=reshape(TDX,ny,nx,nz); 
	DY(:,:,:,n)=reshape(TDY,ny,nx,nz); 
	DZ(:,:,:,n)=reshape(TDZ,ny,nx,nz); 
end;

% That's it!!

s=500;

for n=1:length(vnames),
	mesh(X,Y+s*DY(:,:,:,n),Z+s*DZ(:,:,:,n),log(1e-6+squeeze(sqrt(DZ(:,:,:,n).^2+DY(:,:,:,n).^2))));view(90,0)
	caxis([-13 -6])
	axis([-1 1 -1.5 1.5 -4 0.5])
	M(n)=getframe;
	pause(0);
	end;

% Find spatial limits of mesh

 
phantom_dim=[min(X(:)) max(X(:)) min(Y(:)) max(Y(:)) min(Z(:)) max(Z(:))];


% make N_scats scatterers
N_scats=2000;
init_scat=rand(N_scats,3);

% stretch each dimension by (max-min), shift minimum to min
init_scat(:,1)=init_scat(:,1)*(phantom_dim(2)-phantom_dim(1))+phantom_dim(1);
init_scat(:,2)=init_scat(:,2)*(phantom_dim(4)-phantom_dim(3))+phantom_dim(3);
init_scat(:,3)=init_scat(:,3)*(phantom_dim(6)-phantom_dim(5))+phantom_dim(5);

%
% Calculate scatterer displacements
%
for n=1:length(vnames),
	ofst=(n-1)*3;
	for x=1:N_scats,
		%delta_scat(x,1)=interp3(X,Y,Z,DX(:,:,:,n),init_scat(x,1),init_scat(x,2),init_scat(x,3),'linear');
		delta_scat(x,1+ofst)=0;	
	
delta_scat(x,2+ofst)=interp2(squeeze(Z),squeeze(Y),squeeze(DY(:,:,:,n)),init_scat(x,3),init_scat(x,2),'linear');
	
delta_scat(x,3+ofst)=interp2(squeeze(Z),squeeze(Y),squeeze(DZ(:,:,:,n)),init_scat(x,3),init_scat(x,2),'linear');
        	end;
	disp(n);
	end;


for n=1:length(vnames),
 	ofst=(n-1)*3;
 
	 mesh(Y+s*DY(:,:,:,n),Z+s*DZ(:,:,:,n),X,log(1e-6+squeeze(sqrt(DZ(:,:,:,n).^2+DY(:,:,:,n).^2))));view(90,0)
        caxis([-13 -6])
	hold on
	plot(init_scat(:,2)+s*delta_scat(:,2+ofst),init_scat(:,3)+s*delta_scat(:,3+ofst),'.');
	hold off
	axis([-1.5 1.5 -4 0.5])
	S(n)=getframe;
	end;





