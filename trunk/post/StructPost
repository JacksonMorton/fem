#!/usr/bin/perl
# StructPost.pl
# Summary:  Post-processing of structural ls-dyna model results.
#
# Usage: StructPost DynaDeck NodeDYN
#        DynaDeck - absolute file path for the dyna deck to extract the
#                   termination time and time step
#        NodeDYN - absolute file path to the node ID & coordinate file (nodes.dyn)
#
# ASSUMPTIONS:  
# (1) d3plot files have been generated and are in the working directory 
# (2) The dyna deck uses comma delimiters without spaces or tabs
#
###########################################################################
# HX OF CHANGES
# First stab...
# Mark 04/13/05
###########################################################################
# Updated the output command for ls-prepost2 for the latest version.
# Commented out the remove commands.
# Mark 07/18/06
###########################################################################
# BIG CHANGES!!
# Added the ability to read the dyna deck to extract the termination time 
# and the time step increment.
#
#
# Mark 03/07/08
###########################################################################
# ls-prepost ASCII data save change
# ls-prepost2 will accumulate time steps in memory when dumping them to ASCII
# files; this can occupy large amounts of RAM for large meshes / lots of time
# steps; I've modified the code to now dump a single time step in a loop.  The
# memory footprint is now trivial; the problem is that the overhead of
# launching ls-prepost2 now has to occur for every time step.  In the future I
# will make this a flag, but for now I'll bite the bullet and make this the
# default behavior.
# 
# Mark 2010-08-14
###########################################################################
# replaced the nodes.asc requirement in createsimres w/ nodes.dyn
# # Mark 2011-04-21
###########################################################################

# define the correct paths to matlab and ls-prepost2
#$MATLAB = "/usr/local/matlabR2007a/bin/matlab -nojvm -nosplash";
$MATLAB = "/usr/local/matlab2012a/bin/matlab -nodesktop -nosplash";
#$LS_PREPOST2 = "/usr/local/lstc/bin/lsprepost2_4_linux64_centos52";
#$LS_PREPOST2 = "ls-prepost2";
$LS_PREPOST2 = "lspp4";
$SVN_DYNA_PATH = "/krnlab/mlp6/fem/dyna";

# make sure that the correct number of input arguments are given (2)
if(($#ARGV+1) != 2) { die "Wrong number of input arguments (!=2)" }

$DynaDeck = $ARGV[0];
$NodeDYN = $ARGV[1];

# open up the dyna deck to extract the termination time and the time step
open(NODEFILE,"<$DynaDeck") || die "The input file couldn't be opened!";
$term_time = "*CONTROL_TERMINATION";
$database_d3plot = "*DATABASE_BINARY_D3PLOT";
$work_next_line = 0;
while(<NODEFILE>) {
    chomp;
    if($work_next_line == 1) {
        @fields = split(',',$_);
        $TerminationTime = $fields[0];
        $work_next_line = 0;
    }
    elsif($work_next_line == 2) {
        @fields = split(',',$_);
        $TimeStep = $fields[0];
        $work_next_line = 0;
    }
    elsif($_ =~ m/^$term_time/) {
        $work_next_line = 1;
    }
    elsif($_ =~ m/~$database_d3plot/) {
        $work_next_line = 2;
    }
}
close(NODEFILE);

# compute how many time steps can be extracted
$NumTimeSteps = int($TerminationTime / $TimeStep);

print "Extracting data from d3plots to ASCII with lspp4 . . .\n";
open(SAVEFILE,'> savedisp.cfile');
print SAVEFILE "open d3plot d3plot\n";
print SAVEFILE "fringe 113\n";

for ($i = 1; $i <= $NumTimeSteps; $i++)
	{
        # create temporary ls-prepost2 command file to save the results to ASCII files
        # BELOW IS THE LINE FOR DISPLACEMENTS
	print SAVEFILE "output ./node_disp_t$i.asc $i 1 0 1 0 0 1 0 0 0 0 0 0\n";
        # BELOW IS THE LINE FOR VELOCITIES
	#print SAVEFILE "output ./node_disp_t$i.asc $i 1 0 1 0 0 0 1 0 0 0 0 0 0 0\n";
        # BELOW IS THE LINE FOR max shear strain
	#print SAVEFILE "output ./node_disp_t$i.asc $i 1 0 1 0 0 0 0 0 1 0 0 0 0 0\n";
	}

close(SAVEFILE);
system("$LS_PREPOST2 c=savedisp.cfile -nographics");

$dont_run = 0;
if($dont_run != 1){
# generate disp.dat & create res_sim.mat
# preserving this step for legacy models
print "Running createdisp.m\n";
open(MATFILE,'>runmatlab.m');
# place the appropriate matlab command in here
print MATFILE "addpath('$SVN_DYNA_PATH');\n";
print MATFILE "createdisp($NumTimeSteps);\n";
#print MATFILE "create_velocity($NumTimeSteps);\n";

print MATFILE "createsimres('disp.dat','$NodeDYN','$DynaDeck');\n";
#print MATFILE "createsimreslat('disp.mat','$NodeDYN',$TimeStep,$TerminationTime);\n";
#print MATFILE "createsimresvel('vel.mat','$NodeDYN',$TimeStep,$TerminationTime);\n";

system("$MATLAB < runmatlab.m");
system("rm runmatlab.m");

# clean up temporary runtime files
#system("rm node_disp_t*.asc");

print "Post-processing of model results complete\n";
}
